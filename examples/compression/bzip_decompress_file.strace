6994  openat(AT_FDCWD, "hash_tables.py.bz2", O_RDONLY) = 3
6994  close(3)                          = 0
6994  stat("hash_tables.py.bz2", {st_dev=makedev(0x8, 0x5), st_ino=789270, st_mode=S_IFREG|0664, st_nlink=1, st_uid=1000, st_gid=1000, st_blksize=4096, st_blocks=8, st_size=1185, st_atime=1643694816 /* 2022-02-01T00:53:36-0500 */, st_atime_nsec=0, st_mtime=1637620083 /* 2021-11-22T17:28:03-0500 */, st_mtime_nsec=0, st_ctime=1643696040 /* 2022-02-01T01:14:00.411060368-0500 */, st_ctime_nsec=411060368}) = 0
6994  lstat("hash_tables.py.bz2", {st_dev=makedev(0x8, 0x5), st_ino=789270, st_mode=S_IFREG|0664, st_nlink=1, st_uid=1000, st_gid=1000, st_blksize=4096, st_blocks=8, st_size=1185, st_atime=1643694816 /* 2022-02-01T00:53:36-0500 */, st_atime_nsec=0, st_mtime=1637620083 /* 2021-11-22T17:28:03-0500 */, st_mtime_nsec=0, st_ctime=1643696040 /* 2022-02-01T01:14:00.411060368-0500 */, st_ctime_nsec=411060368}) = 0
6994  openat(AT_FDCWD, "hash_tables.py", O_RDONLY) = -1 ENOENT (No such file or directory)
6994  lstat("hash_tables.py.bz2", {st_dev=makedev(0x8, 0x5), st_ino=789270, st_mode=S_IFREG|0664, st_nlink=1, st_uid=1000, st_gid=1000, st_blksize=4096, st_blocks=8, st_size=1185, st_atime=1643694816 /* 2022-02-01T00:53:36-0500 */, st_atime_nsec=0, st_mtime=1637620083 /* 2021-11-22T17:28:03-0500 */, st_mtime_nsec=0, st_ctime=1643696040 /* 2022-02-01T01:14:00.411060368-0500 */, st_ctime_nsec=411060368}) = 0
6994  stat("hash_tables.py.bz2", {st_dev=makedev(0x8, 0x5), st_ino=789270, st_mode=S_IFREG|0664, st_nlink=1, st_uid=1000, st_gid=1000, st_blksize=4096, st_blocks=8, st_size=1185, st_atime=1643694816 /* 2022-02-01T00:53:36-0500 */, st_atime_nsec=0, st_mtime=1637620083 /* 2021-11-22T17:28:03-0500 */, st_mtime_nsec=0, st_ctime=1643696040 /* 2022-02-01T01:14:00.411060368-0500 */, st_ctime_nsec=411060368}) = 0
6994  openat(AT_FDCWD, "hash_tables.py.bz2", O_RDONLY) = 3
6994  openat(AT_FDCWD, "hash_tables.py", O_WRONLY|O_CREAT|O_EXCL, 0600) = 4
6994  fcntl(4, F_GETFL)                 = 0x8001 (flags O_WRONLY|O_LARGEFILE)
6994  fstat(3, {st_dev=makedev(0x8, 0x5), st_ino=789270, st_mode=S_IFREG|0664, st_nlink=1, st_uid=1000, st_gid=1000, st_blksize=4096, st_blocks=8, st_size=1185, st_atime=1643694816 /* 2022-02-01T00:53:36-0500 */, st_atime_nsec=0, st_mtime=1637620083 /* 2021-11-22T17:28:03-0500 */, st_mtime_nsec=0, st_ctime=1643696040 /* 2022-02-01T01:14:00.411060368-0500 */, st_ctime_nsec=411060368}) = 0
6994  read(3, "BZh91AY&SYd\361\255\36\0\4*\177\200DTD\0X\377\362\0277g\337\n\277\357\377\360P\5\27\273\271'w\275\315\1C\255dhd\247\210\251\352{I\224\323G\251\351\6&@\320\0\0i\265\0004\322\rLMBd\321\220\r\r\r\1\246\200\0\0\31\251\22\32j\7\2446\246\232d\304\0\0\0\0\0\212SRmM\222ha3F\240\0\0\0h\r4\1\22\223 FS)\232\214\310I\345\0\r\3\322h4d\33\325\f\21\0214Ti\267\213?\257T\222\260\32\305\2\250$\2451\214Qh\241x\233\10\202\330\207\274\312\357\353\235\256\276\330\344c~\311\200\302H<L\2\323]\302\"\320i\245v\325V\366P.\367\210\273G\\\25\363\311\326;\213\324\244\366\206\241U\271}mX\2066\245\352\2\270\271\"\302\264\275m\210\353\22\352<\220GT>ATvM,m\301\v\7\265\374S\25405\326y\266-&\313\30\265\373\3234T3\314\302w%7\331d\211\365|\304\226\214\222r\314$-\245\0\221{\200\343\306\33\361\204\246\36\343c\227\10\373L\26\304#i\26\27VS\32\252\"&y\375\3568\264\312g\266\374\221\233\345b\353]eD\346\340\330&\22\252\267\214V\3\33\n\30#\212N<\322\253X\214\212\260\351(\372S8\1_Q,\210\276_\3\314\23\2\240X\334\20s\362%\22\257\270\364X\30\tg\317X\27\7i\1\3;2*\243\354T8]\300\205\226\210#\31\v\322\16\312N\211\212XQ\366\224\262U\25\265\21Fa\rt\255\16\20\3516\216\221HS\220\337*&\302\320\364MN\220\316\223\262\270\311#\27@\n\30\206\10XHu\250B\36\177\32\220\357\323\16c\4\23q\352\342'\310\20v\223L\t^rd\234\200\252.\221i\261D\222:3K\305\314\373C\v\226\337\3534p\10h\211\302\244\356b\264\345-L\216\215{\36\210#p\214\304\234\342\2602\237\3'3\3451\312\262SL\210Q\270{\223}#\6@2Sa\364\244Ghkg\256\22\30\343\334d\320\320\350}X'\303\374\362F\332\354T\3200\\\324&\373\35U\356\223z\271\231\214\262\264\231\341\245\372 \7\f8\264U\242\361N\1'\222\21\364\21\300<b'\5\346\22\277T\360\r\246V^D\366\361\260~\30\372q\342#z\246RN\252fr\241HT\270\243\16D*\325p:\271j@\345\247C\202\6\\z&\275\2054\214\257\375W|=\227\233\363\255\214\255\215\nO\274\240T\227T\221\224y]Si\201\324\0321\253bN\335\253\232\364\25\0=\236\3432\207\272\364\316\272)\323\217\231\361 P&\364\2064\334ks\274\16l\277q\234\3004\214\220\214\364\2041\0,\367\315\333\351e\363\203\260^\33\223xEe\356\204<\2~\267]\306\267H0\262\230\37\331N\314\220\252\317_q=\264o.:\200\300T\26\3110_,`\330\212I\25\330m\246\323\225\233\227I\16\33\272\22\323S\314\25\256F\320\354\340\0340\205\210\4Bx\367\201\217\310\32\36w\270\265\232\0\30\221\332\35a\323\264\24\251dc\267\337\342\353\214\200D\\\372\365\270L\262h\22\22\367\233\342\335:\226V\372\334U-F\322\3628L\24\32\320J\23\"\255C\26\260\213\v\310\25,\366\2373F\204<\252@6M\211\2\247Z\306\365'\226\332\314K$\3341\217 \222\306\335\201\337\302\t\322Z\7\32B\275\256\217|\220R0w$\7\324\354\330J\330.\216\25N\6\356F\345\2\32\311\23\1e\254j\273\214r0D1\2s\251\260q^\310\232\201\360\360\350\261\306\23\22\361>\"\35H\365\372<\300\361\343\316\362\270\322\323w\257U\200\260\302&!\31354U9QB\305D\345\2026-[\202\21\16\230nv\355!I\227j\306\236\254\201\221\t\220\240\374\225\222Q5i\252\332n)\t\336\20`\4\277\233\361\324J\313\364n\362!\244\16\33\217\32\32C\256\r%i\223V\341*\267K\255R\3405\215H6W\3a\33\223\202\340`\25G\273}\16]\2645a\231#:e\301\261\f\344\220\233\321\253Y\21L\353\307\3 \262\377\\1J\204\22\241\276H\323\21\306\r\251\23\312T\5\27P\276\221\261\341C8]\25\301\262\7\256m\341\273\377\27rE8P\220d\361\255\36", 4096) = 1185
6994  read(3, "", 4096)                 = 0
6994  mmap(NULL, 3600384, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0x7f9bf3fe5000
6994  fstat(4, {st_dev=makedev(0x8, 0x5), st_ino=813567, st_mode=S_IFREG|0600, st_nlink=1, st_uid=1000, st_gid=1000, st_blksize=4096, st_blocks=0, st_size=0, st_atime=1643696478 /* 2022-02-01T01:21:18.813857171-0500 */, st_atime_nsec=813857171, st_mtime=1643696478 /* 2022-02-01T01:21:18.813857171-0500 */, st_mtime_nsec=813857171, st_ctime=1643696478 /* 2022-02-01T01:21:18.813857171-0500 */, st_ctime_nsec=813857171}) = 0
6994  munmap(0x7f9bf3fe5000, 3600384)   = 0
6994  fchmod(4, 0100664)                = 0
6994  fchown(4, 1000, 1000)             = 0
6994  close(3)                          = 0
6994  write(4, "import random\nimport sys\nimport argparse\n\nclass HashTable:\n    def __init__(self, num_slots, cap_per_slot, occupancy, total_trials, hash_type):\n        self.num_slots = num_slots\n        self.cap_per_slot = cap_per_slot\n        self.occupancy = occupancy\n        self.total_trials = total_trials\n        self.hash_type = hash_type\n\n        self.num_elements = int(occupancy * num_slots * cap_per_slot)\n        self.trials_with_collisions = 0\n\n    def run_hash_table(self):\n        self.trials_with_collisions = 0\n        for seed in range(self.total_trials):\n            random.seed(seed)\n            occupancy_at_slot = [0] * self.num_slots\n            for i in range(self.num_elements):\n                if self.hash_type == \"standard\":\n                    slot_number = self.standard_hashing(occupancy_at_slot)\n                elif self.hash_type == \"2choice\":\n                    slot_number = self.two_choice_hashing(occupancy_at_slot)\n                elif self.hash_type == \"2left\":\n                    slot_number = self.two_left_hashing(occupancy_at_slot)\n                occupancy_at_slot[slot_number] += 1\n            \n            if any([counter > self.cap_per_slot for counter in occupancy_at_slot]):\n                self.trials_with_collisions += 1\n\n        trials_did_not_exceed = 1.0 - (self.trials_with_collisions/self.total_trials)\n        print(\"Fraction of trials in which slot size did not exceed capacity \", trials_did_not_exceed)\n        return trials_did_not_exceed\n\n\n    def standard_hashing(self, occupancy_at_slot):\n        #TODO: Implement standard hashing by picking a slot number randomly between 0 and NUM_SLOTS - 1\n        # Return the final slot number that you pick.\n        slot_num = random.randint(0, self.num_slots - 1)\n        return slot_num\n\n    def two_choice_hashing(self, occupancy_at_slot):\n        #TODO: Implement 2 choice hashing: pick two slot numbers randomly and then pick the less occupied of the 2\n        # Break ties randomly.\n        # Return the final slot number that you pick.\n        num1 = random.randint(0, self.num_slots - 1)\n        num2 = random.randint(0, self.num_slots - 1)\n        if (occupancy_at_slot[num1] < occupancy_at_slot[num2]):\n            return num1\n        elif (occupancy_at_slot[num1] > occupancy_at_slot[num2]):\n            return num2\n        else:\n            tie = random.randint(1,2)\n            if (tie == 1):\n                return num1\n            else:\n                return num2\n            \n        \n\n    def two_left_hashing(self, occupancy_at_slot):\n        #TODO: Implement 2 left hashing: pick two slots numbers from two sub tables and pick the less occupied of the 2\n        # Always break ties towards one sub table\n        # Return the final slot number that you pick.\n        num1 = random.randint(0, self.num_slots / 2 - 1)\n        num2 = random.randint(self.num_slots / 2, self.num_slots - 1)\n        if (occupancy_at_slot[num1] > occupancy_at_slot[num2]):\n            return num2\n        else:\n            return num1\n\ndef check_hash_type(hash_type):\n    if hash_type not in [\"standard\", \"2choice\", \"2left\"]:\n        raise argparse.ArgumentTypeError(\"In valid hash type.  Valid hash types include standard, 2choice, and 2left.\")\n    return hash_type\n\ndef main(args):\n    if args.occupancy > 1:\n        raise(\"Occupancy should be less than or equal to 1\")\n\n    ht = HashTable(100, 5, args.occupancy, 1000, args.hash_type)\n    ht.run_hash_table()\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='A hash table.')\n    parser.add_argument('--occupancy', type=float,\n                        help='how occupied is the table')\n    parser.add_argument('--hash_type', type=check_hash_type,\n                        help='type of table:  standard, 2choice, 2left')\n\n    arguments = parser.parse_args()\n    main(arguments)\n\n\n", 3845) = 3845
6994  close(4)                          = 0
6994  utime("hash_tables.py", {actime=1643694816 /* 2022-02-01T00:53:36-0500 */, modtime=1637620083 /* 2021-11-22T17:28:03-0500 */}) = 0
6994  unlink("hash_tables.py.bz2")      = 0
6994  exit_group(0)                     = ?
6994  +++ exited with 0 +++
